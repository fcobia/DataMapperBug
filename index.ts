import DynamoDB = require("aws-sdk/clients/dynamodb");
import {attribute, autoGeneratedHashKey, table} from "@aws/dynamodb-data-mapper-annotations";
import {DataMapper} from "@aws/dynamodb-data-mapper";

const assert = require('assert');


const region = 'us-east-1';
const client = new DynamoDB({region: region});
const mapper = new DataMapper({client: client});


@table('MapperBug')
class DBClass {
	
	// Variables
	private _id: string;
	private _aNumber?: number;
	private _aString: string;
	private _aStringArray: string[];
	
	@autoGeneratedHashKey()
	get id(): string {
		return this._id;
	}
	
	set id(value: string) {
		this._id = value;
	}

	@attribute()
	get aNumber(): number {
		return this._aNumber;
	}
	
	set aNumber(value: number) {
		this._aNumber = value;
	}
	
	@attribute()
	get aString(): string {
		return this._aString;
	}
	
	set aString(value: string) {
		this._aString = value;
	}
	
	get aStringArray(): string[] {
		return this._aStringArray;
	}
	
	set aStringArray(value: string[]) {
		this._aStringArray = value;
	}
}


describe("DBMapper Test", function() {
	
	it('null values - pass', async function() {
		// Create an object with null values
		const dbObject = new DBClass();
		dbObject.aString = 'test';
		
		// save it
		try {
			const result = await mapper.put(dbObject);
			console.log('Got here');
		}
		catch (reason) {
			assert.fail(JSON.stringify(reason));
		}
	});
	
	it('null values - fail', async function() {
		// Create an object with null values
		const dbObject = new DBClass();
		dbObject.aNumber = null;
		dbObject.aString = 'test';
		
		// save it
		try {
			const result = await mapper.put(dbObject);
			console.log('Got here');
		}
		catch (reason) {
			assert.fail(JSON.stringify(reason));
		}
	});
});
